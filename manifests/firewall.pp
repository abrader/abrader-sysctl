# An example wrapper class to show how to handle variable entries
class abrader::firewall (
  Array[Abrader::FirewallRule] $firewall_rules,
) {

  $firewall_rules.each |Hash $firewall_rule| {
    firewall { $firewall_rule['name'] :
      #ensure   => $firewall_rule['ensure'],
      action                => $firewall_rule['action'],
      source                => $firewall_rule['source'],
      src_range             => $firewall_rule['src_range'],
      destination           => $firewall_rule['destination'],
      dst_range             => $firewall_rule['dst_range'],
      sport                 => $firewall_rule['sport'],
      dport                 => $firewall_rule['dport'],
      port                  => $firewall_rule['port'],
      dst_type              => $firewall_rule['dst_type'],
      src_type              => $firewall_rule['src_type'],
      proto                 => $firewall_rule['proto'],
      mss                   => $firewall_rule['mss'],
      tcp_flags             => $firewall_rule['tcp_flags'],
      chain                 => $firewall_rule['chain'],
      table                 => $firewall_rule['table'],
      jump                  => $firewall_rule['jump'],
      goto                  => $firewall_rule['goto'],
      iniface               => $firewall_rule['iniface'],
      outiface              => $firewall_rule['outiface'],
      tosource              => $firewall_rule['tosource'],
      todest                => $firewall_rule['todest'],
      toports               => $firewall_rule['toports'],
      to                    => $firewall_rule['to'],
      random                => $firewall_rule['random'],
      reject                => $firewall_rule['reject'],
      log_level             => $firewall_rule['log_level'],
      log_prefix            => $firewall_rule['log_prefix'],
      log_uid               => $firewall_rule['log_uid'],
      nflog_group           => $firewall_rule['nflog_group'],
      nflog_prefix          => $firewall_rule['nflog_prefix'],
      nflog_range           => $firewall_rule['nflog_range'],
      nflog_threshold       => $firewall_rule['nflog_threshold'],
      icmp                  => $firewall_rule['icmp'],
      state                 => $firewall_rule['state'],
      ctstate               => $firewall_rule['ctstate'],
      connmark              => $firewall_rule['connmark'],
      connlimit_above       => $firewall_rule['connlimit_above'],
      connlimit_mask        => $firewall_rule['connlimit_mask'],
      hop_limit             => $firewall_rule['hop_limit'],
      limit                 => $firewall_rule['limit'],
      burst                 => $firewall_rule['burst'],
      uid                   => $firewall_rule['uid'],
      gid                   => $firewall_rule['gid'],
      match_mark            => $firewall_rule['match_mark'],
      set_mark              => $firewall_rule['set_mark'],
      clamp_mss_to_pmtu     => $firewall_rule['clamp_mss_to_pmtu'],
      set_dscp              => $firewall_rule['set_dscp'],
      set_dscp_class        => $firewall_rule['set_dscp_class'],
      set_mss               => $firewall_rule['set_mss'],
      pkttype               => $firewall_rule['pkttype'],
      isfragment            => $firewall_rule['isfragment'],
      recent                => $firewall_rule['recent'],
      rdest                 => $firewall_rule['rdest'],
      rsource               => $firewall_rule['rsource'],
      rname                 => $firewall_rule['rname'],
      rseconds              => $firewall_rule['rseconds'],
      reap                  => $firewall_rule['reap'],
      rhitcount             => $firewall_rule['rhitcount'],
      rttl                  => $firewall_rule['rttl'],
      socket                => $firewall_rule['socket'],
      ishasmorefrags        => $firewall_rule['ishasmorefrags'],
      islastfrag            => $firewall_rule['islastfrag'],
      isfirstfrag           => $firewall_rule['isfirstfrag'],
      ipsec_policy          => $firewall_rule['ipsec_policy'],
      ipsec_dir             => $firewall_rule['ipsec_dir'],
      stat_mode             => $firewall_rule['stat_mode'],
      stat_every            => $firewall_rule['stat_every'],
      stat_packet           => $firewall_rule['stat_packet'],
      stat_probability      => $firewall_rule['stat_probability'],
      mask                  => $firewall_rule['mask'],
      gateway               => $firewall_rule['gateway'],
      ipset                 => $firewall_rule['ipset'],
      checksum_fill         => $firewall_rule['checksum_fill'],
      mac_source            => $firewall_rule['mac_source'],
      physdev_in            => $firewall_rule['physdev_in'],
      physdev_out           => $firewall_rule['physdev_out'],
      physdev_is_bridged    => $firewall_rule['physdev_is_bridged'],
      physdev_is_in         => $firewall_rule['physdev_is_in'],
      physdev_is_out        => $firewall_rule['physdev_is_out'],
      date_start            => $firewall_rule['date_start'],
      date_stop             => $firewall_rule['date_stop'],
      time_start            => $firewall_rule['time_start'],
      time_stop             => $firewall_rule['time_stop'],
      month_days            => $firewall_rule['month_days'],
      week_days             => $firewall_rule['week_days'],
      time_contiguous       => $firewall_rule['time_contiguous'],
      kernel_timezone       => $firewall_rule['kernel_timezone'],
      clusterip_new         => $firewall_rule['clusterip_new'],
      clusterip_hashmode    => $firewall_rule['clusterip_hashmode'],
      clusterip_clustermac  => $firewall_rule['clusterip_clustermac'],
      clusterip_total_nodes => $firewall_rule['clusterip_total_nodes'],
      clusterip_local_node  => $firewall_rule['clusterip_local_node'],
      clusterip_hash_init   => $firewall_rule['clusterip_hash_init'],
      length                => $firewall_rule['length'],
      string                => $firewall_rule['string'],
      string_algo           => $firewall_rule['string_algo'],
      string_from           => $firewall_rule['string_from'],
      string_to             => $firewall_rule['string_to'],
      queue_num             => $firewall_rule['queue_num'],
      queue_bypass          => $firewall_rule['queue_bypass'],
      src_cc                => $firewall_rule['src_cc'],
      dst_cc                => $firewall_rule['dst_cc'],
      #firewallchain         => $firewall_rule['firewallchain'],
      provider              => $firewall_rule['provider'],
    }
  }

}
